{
  sector0 = {},
  sector1 = {
    blocks = {
      "local a = fs.list(\"/\")\
for k, v in ipairs(a) do\
\009print(v)\
end",
      {
        testFile = 1,
        testAPI = 6,
        testtest = 7,
        rom = 3,
      },
      {
        romFile = 4,
        testtest = 8,
      },
      "Hello, ROM",
      last_block = 8,
      [ 6 ] = "\
function test() print('hello') end\
test()",
      [ 7 ] = "\
local ok, err = os.loadAPI(\"/testAPI\")\
if not ok then print('error:'..err) end\
print('API:'..tostring(_G.testAPI))\
print('testfunc:'..tostring(testAPI.test))\
print('testfunc in _G:'..tostring(_G.testAPI.test))\
print('Everything in _G.testAPI:')\
for k, v in pairs(_G.testAPI) do\
print(k)\
print(v)\
end",
      [ 8 ] = "\
hell√∂",
    },
    inodes = {
      {
        block = 1,
        readOnly = false,
        type = 1,
      },
      {
        block = 2,
        readOnly = false,
        type = 0,
      },
      {
        block = 3,
        readOnly = false,
        type = 0,
      },
      {
        block = 4,
        readOnly = false,
        type = 1,
      },
      {},
      {
        block = 6,
        type = 1,
      },
      {
        block = 7,
        type = 1,
      },
      {
        block = 8,
        type = 1,
      },
      last_inode = 8,
    },
  },
  bootSector = {
    [ "bios.lua" ] = "\
local label = \"cVM\"\
os.loadAPI = function(path)\
\009local f, err = loadfile(path)\
\009if not f then\
\009\009return false, err\
\009end\
\009local env = {}\
\009setmetatable(env, {__index=_G})\
\009setfenv(f, env)\
\009local k, err = pcall(f)\
\009if not k then \
\009\009return false, err\
\009end\
\009_G[fs.getName(path)] = {}\
\009for k, v in pairs(env) do\
\009\009_G[fs.getName(path)][k] = v\
\009end\
\009return true\
end\
os.version = function()\
\009return \"cVMWare CraftOS 1.7\"\
end\
os.getComputerID = function()\
\009return 0\
end\
os.getComputerLabel = function()\
\009return label\
end\
os.setComputerLabel = function(lbl)\
\009if lbl then\
\009\009label = lbl\
\009else\
\009\009label = \"cVM\"\
\009end\
end\
_G.write = function(string)\
\009term.write(string)\
end\
_G.sleep = function(time)\
\009return os.sleep(time)\
end\
function os.run(env, path, ...)\
\009local tArgs = {...}\
\009local func, err = loadfile(path)\
\009if not func then return false, err end\
\009setmetatable(env, {__index = _G})\
\009setfenv(func, env)\
\009return func(unpack(tArgs))\
end\
os.unloadAPI = function(name)\
\009_G[name] = nil\
end\
for k, v in pairs(_G) do\
\009term.write(k..\":\")\
end\
\
print(\"\")\
print(\"\")\
for k, v in ipairs(fs.list(\"/\")) do\
\009print(v)\
end\
print(\"Finished BIOS!\")\
print(\"NOTE: This is NOT CraftOS, many APIs you know from\")\
print(\"stock CC are not existent!!!\")\
print(\"Type 'reboot' to reboot this VM\")\
print(\"Type 'shutdown' to shut this VM down.\")\
print(\"Type 'newFile' to create a file in /\")\
print(\"Type 'ls' to list the files in /\")\
print(\"Type 'del' to delete a file in /\")\
while true do\
\009local e = read()\
\009if e == \"reboot\" then\
\009\009_vm.reboot()\
\009elseif e == \"shutdown\" then\
\009\009_vm.shutdown()\
\009elseif fs.exists(e) and fs.isDir(e) == false then\
\009\009local a, err = loadfile(e)\
\009\009if not a then\
\009\009\009print(err)\
\009\009else\
\009\009\009local _, err = pcall(a)\
\009\009\009if not _ then\
\009\009\009\009print(err)\
\009\009\009else\
\009\009\009\009print(\"Successfully executed!\")\
\009\009\009end\
\009\009end\
\009elseif e == \"newFile\" then\
\009\009term.write(\"Name: \")\
\009\009e = read()\
\009\009if #e < 1 then\
\009\009\009e = \"newFile\" \
\009\009end\
\009\009local file = fs.open(e, \"w\")\
\009\009term.write(\"Text: \")\
\009\009e = read()\
\009\009file.writeLine(e)\
\009\009file.close()\
\009\009print(\"Finished!\")\
\009elseif e == \"ls\" then\
\009\009local list = fs.list(\"/\")\
\009\009for k, v in ipairs(list) do\
\009\009\009print(v)\
\009\009end\
\009elseif e == \"del\" then\
\009\009term.write(\"Path:\")\
\009\009local e = read()\
\009\009local ok, err = fs.delete(e..\"/\")\
\009\009if ok or err == nil then\
\009\009\009print(\"Finished!\")\
\009\009else\
\009\009\009print(\"Error:\"..tostring(err))\
\009\009end\
\009end\
end",
  },
}